{
    "contents" : "# TO DO: Check & discard subjects according to gameplay vars\n# NOTE: lots of data is STILL MISSING \n# LOTS of distraction assignments not yet entered\n\n# (max distraction subno is 149, digit subject is 171, distract is 182??)\n\n# how do i aggregate all this data from this disparate spreadsheets?\n# closest I can think of is my loop below which retrieves for a filename\n\n# Subject 80 \"bad\"?\n\n#install.packages(\"xlsx\")\nlibrary(xlsx)\n\ndataSheets = c(\"Debrief\", \"digits\", \"Distraction_Assignment\", \"Note_sheet\", \n               \"Post-Questionnaire\", \"Writing_Task_Evaluation\")\n\noutList = vector(\"list\", length=length(dataSheets))\nnames(outList) = dataSheets\ndat = data.frame(NULL)\nfor (i in 1:length(dataSheets)) {\n  RAs = substr(list.files(pattern=dataSheets[i]), nchar(dataSheets[i])+2, nchar(dataSheets[i])+3)\n  for (j in 1:length(RAs)) {\n    fileName = paste(\"./data_files/\", dataSheets[i], \"_\", RAs[j], \".xlsx\", sep=\"\")\n    temp = read.xlsx(fileName, 1, stringsAsFactors=F)\n    temp$Entrant = RAs[j]\n    print(fileName); print(names(temp))\n    dat = rbind(dat, temp)\n    # Save to an object with variable name\n    # I'm going to use eval(parse()) and you don't get to pretend you're better than me\n    }\n  outList[[i]] = dat\n  dat = data.frame(NULL)\n}\n\n# fix subno name\nnames(outList[[2]])[1] = \"Subject\"\n\n# checking for duplicates\n# Note that it is right that \"digits\" has frequent duplicates!\nfor (i in 1:length(dataSheets)) {\n  print(names(outList)[i])\n  print(subset(table(outList[[i]]$Subject), table(outList[[i]]$Subject)>1))\n}\n\ndebrief = outList[[1]]\ndebrief[debrief$Subject == 168,] # bad\ndebrief = debrief[!(debrief$Subject %in% c(\"165 or 166?\", \"168\")),] \n\ndigits = outList[[2]]\ndigits = digits[complete.cases(digits[,1:9]),]\n# need to average digit-ratios, inspect for enormous differences\n\ndistract = outList[[3]]\ndistract = distract[!(distract$Subject %in% c(168, 170, 203, 33)),]\ndistract = distract[complete.cases(distract),]\n\nnotes = outList[[4]]\nnotes[notes$Subject == 150,]\nnotes = notes[-265,] # deleting duplicate row\n\npostQ = outList[[5]]\n\neval = outList[[6]]\neval = eval[!(eval$Subject %in% c(140, 63, 82)),]\n\n# dat = data.frame(NULL)\n# names(dat) = c(names(notes), names(distract), names(postQ), \n#                names(distract), names(digits), names(debrief), names(eval))\n\n\ndigitsNew = data.frame(NULL)\ndigitsNew$Subject = unique(digits$Subject)\nfor (i in 2:9) {\n  temp = unique(digits$Subject)\n  digitsNew[,i] = tapply(digits[,i], digits$Subject, mean) # create averages\n  digitsNew[,i+10] = tapply(digits[,i], digits$Subject, diff) # create new column for storing diff\n}\ncolnames(digitsNew)[12:19] = paste(colnames(digitsNew)[2:9], \"diff\", sep=\"_\")\n\nsetwd(\"C:/Dissertation/Analysis_02012014\")\ndistract = read.delim(file=\"distraction_assignment.txt\")\nnotes = read.delim(file=\"RA_notes.txt\")\ndigit = read.delim(file=\"2d4d.txt\")\n\ncolnames(distract)\ncolnames(notes)\nclass(distract$Subject)\nclass(notes$Subject)\n\nbarplot(table(notes$Subject))\nbarplot(table(distract$Subject)) # some subjects in distract 2x\nbarplot(table(digit$Subno))\ntable(distract$Subject)[table(distract$Subject)>1] #subs 33, 170, 999\ndistract[distract$Subject %in% c(33, 168, 170, 203,224,225, 999, 165167, 1681, 1682),] # well somebody fucked up\n# subjects 203, 224, and 225 seem fine though\nnotes[notes$Subject %in% c(33, 168, 170, 999, 165, 167),] \n# no RA notesheet on file for most of these. ugh.\nbadsubs = c(33, 168, 170, 999, 165167, 1681, 1682)\ndistract=subset(distract, !(distract$Subject %in% badsubs))\ndistract2=distract[!(is.na(distract$Assignment) & distract$Subject %in% c(203, 224, 225)),]\nbarplot(table(distract2$Subject))\n\ndat=data.frame(notes, \n               \"Violence\"=factor(\"Chex Quest\", levels=c(\"Chex Quest\", \"Brutal Doom\")), \n               \"Difficulty\"=factor(\"Easy\", levels=c(\"Easy\", \"Hard\")),\n               \"DV\"=NA, \"L_2d4d\"=NA, \"R_2d4d\"=NA)\nfor (i in distract2$Subject) {\n  #declare indices for each data frame according to subject #\n  datIndex=(dat$Subject==i); disIndex=(distract2$Subject==i); \n  #change dat values according to sub-frames values\n  dat$DV[datIndex]=distract2$Assignment[disIndex]\n}\nfor (i in digit$Subno) {\n  #declare indices for each data frame according to subject #\n  datIndex=(dat$Subject==i); digIndex=(digit$Subno==i)\n  #change dat values according to sub-frames values\n  dat$L_2d4d[datIndex]=digit$L_2d4d[digIndex]\n  dat$R_2d4d[datIndex]=digit$R_2d4d[digIndex]\n}\n\n#assign brutal violence & hard difficulty\ndat$Violence[dat$Condition %in% c(1,2)] = \"Brutal Doom\"\ndat$Difficulty[dat$Condition %in% c(2,4)] = \"Hard\"\n# and as numerics for to check point-biserial correlations...\ndat$vioNum = 0; dat$vioNum[dat$Violence==\"Brutal Doom\"] = 1\ndat$diffNum = 0; dat$diffNum[dat$Difficulty==\"Hard\"] = 1\n#check 2d4d quality\nhist(dat$L_2d4d, breaks=15); hist(dat$R_2d4d, breaks=15)\n# i'm guessing that the one 2d4d at 1.15 is an error.\ndat$R_2d4d[dat$R_2d4d > 1.1] = NA # remove it\n#okay that should do it\ncolnames(dat)\ndat$Good.Session.[dat$Good.Session.==\"Maybe \"] = \"Maybe\"\ndat$Good.Session.[dat$Good.Session.==\"Yes \"] = \"Yes\"\ndat$Good.Session.[dat$Good.Session.==\"No/Maybe \"] = \"Maybe\"\ndat$Good.Session.[dat$Good.Session. %in% c(\"\",\".\",\"N/A\")] = \"N/A\" # this causes whole row to turn NA\n\n\n\nhist(dat$DV); summary(dat$DV) # strong ceiling effect. 11 NAs? \n# histograms w/ facet wraps for conditions\nrequire(ggplot2)\nggplot(dat, aes(x=DV)) + \n  geom_histogram(breaks=c(1:9)) +\n  facet_wrap(~Good.Session., nrow=2)\nhist(dat$DV[dat$Good.Session. == \"Yes\"]); summary(dat$DV[dat$Good.Session. == \"Yes\"])\nhist(dat$DV[dat$Good.Session. == \"No\"], breaks=9); summary(dat$DV[dat$Good.Session. == \"No\"])\nhist(dat$DV[dat$Good.Session. == \"Maybe\"], breaks=9); summary(dat$DV[dat$Good.Session. == \"Maybe\"])\n\ngood = dat[dat$Good.Session.==\"Yes\",]\nmaybe = dat[dat$Good.Session.%in%c(\"Yes\",\"Maybe\"),]\n\nfactorList = c(\"RA\", \"Subject\", \"Station\",\"Condition\")\ndat$Station = as.factor(dat$Station)\ndat$Condition = as.factor(dat$Condition)\n\n# let's go straight to the good stuff\nset = good # could be \"good\" \"maybe\" or \"dat\"\nset$R_2d4d[set$R_2d4d > 1.1] = NA # R_2d4d outlier removal\n\ncor(set[,c(\"vioNum\", \"diffNum\", \"L_2d4d\", \"R_2d4d\")], use=\"pairwise.complete.obs\") # random assignment good\n\nrequire(car)\n# 3-way w/ left hand. \n#sink(file=\"ANOVA_results.txt\", split=T)\nm1 = lm(DV ~ Difficulty * Violence * L_2d4d, data=set)\nsummary(m1); Anova(m1, type=3)\n# 3-way w/ right hand\nm2 = lm(DV ~ Difficulty * Violence * R_2d4d, data=set)\nsummary(m2); Anova(m2, type=3)\n# 2-ways, dropping 2d4d & 3-ways.\nm3 = lm(DV ~ Difficulty * Violence, data=set)\nsummary(m3); Anova(m3, type=3)\n#sink()\n# 2d4d?\nm4 = lm(DV ~ L_2d4d, data=set)\nsummary(m4)\nm5 = lm(DV ~ R_2d4d, data=set)\nsummary(m5)\n# compare vs no-violence model?\nm6 = lm(DV ~ Difficulty + Violence, data=set)\nm7 = lm(DV ~ Difficulty, data=set)\nm8 = lm(DV ~ Violence, data=set)\nm9 = lm(DV ~ 1, data=set)\n\n# trying censored-from-above analysis:\nrequire(censReg)\n# 3-way with left hand\n#sink(\"Censored-from-above_results.txt\")\ncensModel1 = censReg(DV ~ Difficulty*Violence*L_2d4d, left=1, right=9, data=set)\nsummary(censModel1)\n# 3-way w/ right hand\ncensModel2 = censReg(DV ~ Difficulty*Violence*R_2d4d, left=1, right=9, data=set)\nsummary(censModel2)\n# 2-ways, dropping 2d4d & 3-ways\ncensModel3 = censReg(DV ~ Difficulty*Violence, left=1, right=9, data=set)\nsummary(censModel3)\n#sink()\n\n# how about binning?\n# logistic regression\nrequire(rms)\nset$DVbin=NA\nset$DVbin[set$DV==9] = 1\nset$DVbin[set$DV<9] = 0\n#sink(\"Binomial_results.txt\", split=T)\nmodel1 = glm(DVbin ~ Difficulty*Violence*L_2d4d, family=binomial(link=\"logit\"), data=set)\nsummary(model1)\nmodel2 = glm(DVbin ~ Difficulty*Violence*R_2d4d, family=binomial(link=\"logit\"), data=set)\nsummary(model2)\nmodel3 = glm(DVbin ~ Difficulty*Violence, family=binomial, data=set)\nsummary(model3)\nmodel4 = glm(DVbin ~ L_2d4d, family=binomial, data=set)\nmodel5 = glm(DVbin ~ R_2d4d, family=binomial, data=set)\nmodel6 = glm(DVbin ~ Difficulty + Violence, family=binomial, data=set)\nmodel7 = glm(DVbin ~ Difficulty, family=binomial, data=set)\nmodel8 = glm(DVbin ~ Violence, family=binomial, data=set)\nmodel9 = glm(DVbin ~ 1, family=binomial, data=set)\n# one more, with feeling\nmodel5a = lrm(DVbin ~ Difficulty * Violence, data=set)\nmodel6a = lrm(DVbin ~ Difficulty + Violence, data=set)\nmodel7a = lrm(DVbin ~ Difficulty, data=set)\nmodel8a = lrm(DVbin ~ Violence, data=set)\nmodel9a = lrm(DVbin ~ 1, data=set)\n\n# consider using confint()\n\nsink()\n\nqplot(data=set, x=DV, geom=\"histogram\", facets=(~Violence*Difficulty), \n      main=\"Histograms of aggression per condition\")\nqplot(data=set, x=interaction(set$Violence, set$Difficulty), y=DV, notch=T, geom=\"boxplot\", \n      xlab = \"Condition assigned\", ylab=\"Aggression\")\nqplot(data=set, x=interaction(set$Violence, set$Difficulty), y=DV, notch=T, geom=\"point\"\n      ,position=position_jitter(w=.25, h=.1), cex=2, alpha=.9\n      ,xlab = \"Condition assigned\", ylab=\"Aggression\")\nqplot(data=set, x=L_2d4d, y=DV, col=Violence, geom=c(\"point\", \"smooth\"))\nqplot(data=set, x=R_2d4d, y=DV, col=Violence, geom=c(\"point\", \"smooth\"))\n\n# the best of the best:\npostertext = theme(text = element_text(size=16),\n                   axis.title = element_text(size=24),\n                   strip.text = element_text(size=28),\n                   plot.title = element_text(size=32)\n)\n\n# scatterplot w/ left-hand 2d4d:\nggplot(data=set, aes(x=L_2d4d, y=DV, col=Violence)) +\n  geom_point(cex=4, alpha=.8, position=position_jitter(height=.1)) +\n  geom_smooth(method=\"lm\")+\n  labs(title=\"Does prenatal testosterone interact with game violence?\") +\n  xlab(\"Left-hand 2d4d ratio \\n Smaller ratio implies greater testosterone\") +\n  ylab(\"Coldpressor duration assigned (aggression)\") +\n  # make the text huge\n  postertext +\n  # remove the background\n  theme(panel.background=element_blank(),\n        # this part attempts to adjust the axis distance but i'm having trouble\n        axis.title.y=element_text(vjust=.2),\n        axis.title.x=element_text(vjust=.5)\n        )\n\n# scatterplot w/ right-hand 2d4d:\nggplot(data=set, aes(x=R_2d4d, y=DV, col=Violence)) +\n  geom_point(cex=4, alpha=.8, position=position_jitter(height=.1)) +\n  geom_smooth(method=\"lm\")+\n  labs(title=\"Does prenatal testosterone interact with game violence?\") +\n  xlab(\"Right-hand 2d4d ratio\") +\n  ylab(\"Coldpressor duration assigned (aggression)\") +\n  scale_y_discrete(limits=1:9) +\n  # make the text huge\n  postertext #+\n  # remove the background\n  theme(panel.background=element_blank(),\n        # this part attempts to adjust the axis distance but i'm having trouble\n        axis.title.y=element_text(vjust=.2),\n        axis.title.x=element_text(vjust=.5)\n        )\n\n# scatterplot w/ right-hand 2d4d:\nggplot(data=set, aes(x=R_2d4d, y=DV)) +\n  geom_point(cex=4, alpha=.75) +\n  geom_smooth(method=\"lm\")+\n  labs(title=\"Null effects of 2d4d ratio (right hand)\") +\n  xlab(\"Right-hand 2d4d ratio\") +\n  ylab(\"Coldpressor duration assigned (level)\") +\n  # break it out into each game condition\n  facet_wrap(~Violence*Difficulty) +\n  scale_y_discrete(limits=1:9, breaks=c(1,3,5,7,9)) +\n  # make the text huge\n  postertext  #+\n#   # remove the background\n#   theme(panel.background=element_blank(),\n#         # this part attempts to adjust the axis distance but i'm having trouble\n#         axis.title.y=element_text(vjust=.2),\n#         axis.title.x=element_text(vjust=.5)\n#         )\n\n# scatterplot w/ left-hand 2d4d:\nggplot(data=set, aes(x=L_2d4d, y=DV)) +\n  geom_point(cex=4, alpha=.75) +\n  geom_smooth(method=\"lm\")+\n  labs(title=\"Null effects of 2d4d ratio (left hand)\") +\n  xlab(\"Left-hand 2d4d ratio\") +\n  ylab(\"Coldpressor duration assigned (level)\") +\n  # break it out into each game condition\n  facet_wrap(~Violence*Difficulty) +\n  scale_y_discrete(limits=1:9, breaks=c(1,3,5,7,9)) +\n  # make the text huge\n  postertext\n\n# univariate histograms:\nggplot(data=set, aes(x=DV)) +\n  geom_histogram() +\n  facet_wrap(~Difficulty*Violence) +\n  xlab(\"Coldpressor duration assigned (level)\") +\n  scale_x_discrete(limits=c(1:9)) +\n  ylab(\"Count\") + \n  postertext\n# # jitter points\n# ggplot(data=set, aes(x=interaction(set$Violence, set$Difficulty), y=DV)) +\n#   geom_point(position=position_jitter(width=.25, height=.05), cex=3, alpha=.8) +\n#   theme(text = element_text(size=32)) +\n#   xlab(\"Game Condition\") +\n#   ylab(\"Coldpressor duration assigned\")\n# boxplot\nggplot(data=set, aes(x=interaction(set$Violence, set$Difficulty), y=DV)) +\n  geom_boxplot(notch=T) +\n  postertext +\n  theme(axis.text = element_text(size=30)) +\n  scale_y_continuous(limits=c(1,9), breaks=c(1,3,5,7,9)) +\n  xlab(\"Game Condition\") +\n  ylab(\"Coldpressor duration assigned (level)\")\n\n\nggplot(data=set, aes(x=L_2d4d, y=DV, col=Violence)) +\n  geom_point() +\n  geom_smooth(method=\"lm\")+\n  labs(title=\"Does prenatal testosterone interact with game violence?\") +\n  xlab(\"Left 2d4d ratio \\n Smaller ratio implies greater testosterone\") +\n  ylab(\"Coldpressor duration assigned (aggression)\")\n\nggplot(data=set, aes(x=R_2d4d, y=DV, col=Difficulty)) +\n  geom_point() +\n  geom_smooth(method=\"lm\")+\n  labs(title=\"Does prenatal testosterone interact with game difficulty?\") +\n  xlab(\"Right 2d4d ratio \\n Smaller ratio implies greater testosterone\") +\n  ylab(\"Coldpressor duration assigned (aggression)\")\n\n\nrequire(BayesFactor)\n\ndat1=dat[!is.na(dat$DV),]\ngood1=good[!is.na(good$DV),]\nbf1 = anovaBF(DV ~ Violence*Difficulty, data=dat1, rscaleFixed=.21, iterations=10^5)\nbf2 = anovaBF(DV ~ Violence*Difficulty, data=good1, rscaleFixed=.21, iterations=10^5)\nbf3 = lmBF(DV ~ Violence*Difficulty*L_2d4d, data=good1[!is.na(good1$L_2d4d),], rscaleFixed=.21, iterations=10^5)\nbf4 = lmBF(DV ~ Violence*Difficulty*R_2d4d, data=good1[!is.na(good1$R_2d4d),], rscaleFixed=.21, iterations=10^5)\nbf5 = lmBF(DV ~ L_2d4d, data=good1[!is.na(good1$L_2d4d),], rscaleFixed=.21, iterations=10^5)\nbf6 = lmBF(DV ~ R_2d4d, data=good1[!is.na(good1$R_2d4d),], rscaleFixed=.21, iterations=10^5)\n\n\nbf1\nbf2\nbf3\nbf4\nbf5\nbf6\n\nanovaBF(DV ~ Violence*Difficulty, data=dat1, iterations=10^5)\nanovaBF(DV ~ Violence*Difficulty, data=good1, iterations=10^5)\n\n# inspect the shape of these dang ol' priors\nr = seq(-1,1,.01)\nplot(x=r, y=dcauchy(r, scale=.21), type='l', col='red')\nlines(x=r, y=dcauchy(r, scale=.1), type='l')\nlines(x=r, y=dcauchy(r, scale=.5), type='l', col='blue')\nlines(x=r, y=dcauchy(r, scale=sqrt(2)/2), type='l', col='green')\nlines(x=r, y=dcauchy(r, scale=1), type='l', col='orange')\n\npcauchy(.21, scale=.21, lower.tail=F) #\n",
    "created" : 1422580358986.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3701257626",
    "id" : "324293AA",
    "lastKnownWriteTime" : 1422734499,
    "path" : "~/GitHub/Dissertation/Analysis/raw-data-prep/preparation_WIP.R",
    "project_path" : "preparation_WIP.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}